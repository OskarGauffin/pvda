[{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 pvutils authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"disproportionality-analysis-for-a-specific-drug-event-combination","dir":"Articles","previous_headings":"","what":"Disproportionality analysis for a specific drug-event combination","title":"Disproportionality_analysis","text":"first use-case functions provide way calculate confidence credibility intervals specific drug-event-combination, already know number observed reports, required counts database total count, number reports exposure number reports event. instance, may extracted counts excel sheet tool estimators implemented, want check results consistent across different estimators. details specific input parameters, consult documentation function.","code":"library(pvutils) ## Report issues at https://github.com/OskarGauffin/pvutils prr(obs = 10, n_drug = 1000, n_event_prr = 200, n_tot_prr = 10000) ## # A tibble: 1 × 3 ##   prr_lower    prr prr_upper ##       <dbl>  <dbl>     <dbl> ## 1     0.264 0.0002     0.947 ror(a = 10, b = 20, c= 200, d = 10000) ## # A tibble: 1 × 3 ##   ror_lower   ror ror_upper ##       <dbl> <dbl>     <dbl> ## 1      11.6    25      54.1 ic(obs = 10, exp = 5) ## # A tibble: 1 × 3 ##   ic_lower    ic ic_upper ##      <dbl> <dbl>    <dbl> ## 1  -0.0973 0.933     1.69"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"disproportionality-analysis-from-report-level-data","dir":"Articles","previous_headings":"","what":"Disproportionality analysis from report-level data","title":"Disproportionality_analysis","text":"don’t counts mentioned , report-level data want perform disproportionality analysis , straightforward. , ’ll demonstrate using simulated data set ‘drug_event_df’ included package. avoid proprietary issues, drugs named Drug_A - Drug_Z, events named Event_1 - Event_1000. now step three steps detail.","code":"drug_event_df |>   add_expected_counts() |>   add_disproportionality() ## # A tibble: 1,279 × 23 ##    drug   event   obs n_drug n_event n_tot exp_rrr n_eve…¹ n_tot…² exp_prr     b ##    <chr>  <chr> <int>  <int>   <int> <int>   <dbl>   <int>   <int>   <dbl> <int> ##  1 Drug_A Even…    21    359     174  1000    62.5     153     641    85.7   338 ##  2 Drug_A Even…    21    359     155  1000    55.6     134     641    75.0   338 ##  3 Drug_C Even…    21    298     174  1000    51.9     153     702    64.9   277 ##  4 Drug_E Even…    21    279     186  1000    51.9     165     721    63.8   258 ##  5 Drug_D Even…    20    275     163  1000    44.8     143     725    54.2   255 ##  6 Drug_A Even…    19    359     186  1000    66.8     167     641    93.5   340 ##  7 Drug_A Even…    19    359     138  1000    49.5     119     641    66.6   340 ##  8 Drug_C Even…    19    298     163  1000    48.6     144     702    61.1   279 ##  9 Drug_E Even…    19    279     138  1000    38.5     119     721    46.0   260 ## 10 Drug_A Even…    18    359     163  1000    58.5     145     641    81.2   341 ## # … with 1,269 more rows, 12 more variables: c <int>, d <int>, exp_ror <dbl>, ## #   ic_lower <dbl>, ic <dbl>, ic_upper <dbl>, prr_lower <dbl>, prr <dbl>, ## #   prr_upper <dbl>, ror_lower <dbl>, ror <dbl>, ror_upper <dbl>, and ## #   abbreviated variable names ¹​n_event_prr, ²​n_tot_prr"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"correctly-structured-input-data","dir":"Articles","previous_headings":"Disproportionality analysis from report-level data","what":"Correctly structured input data","title":"Disproportionality_analysis","text":"important report-level data structured alignment package expects. Every line passed data corresponds reported drug-event pair. drug_event_df-example data, first three rows drug_event_df report, report_id = 1. first row reports Drug_D adverse event named Event_5.next three rows another report, instance drug B reported two different events, event 15 event 33. completeness, note drug-event pair occurs several times one report, contributes . , observed count five means five different reports containing drug-event-pair, single report contained drug-event pair multiple times (impossible, case rechallenge, data entry errors etc.)","code":"drug_event_df[1:6, ] ## # A tibble: 6 × 3 ##   report_id drug   event    ##       <int> <chr>  <chr>    ## 1         1 Drug_D Event_5  ## 2         1 Drug_G Event_56 ## 3         1 Drug_O Event_89 ## 4         2 Drug_A Event_33 ## 5         2 Drug_B Event_15 ## 6         2 Drug_B Event_28"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"counting-the-expected","dir":"Articles","previous_headings":"Disproportionality analysis from report-level data","what":"Counting the expected","title":"Disproportionality_analysis","text":"Disproportionality analysis based observed--expected ratio. observed count compared expected count, based comparator background. technical details PRR, RRR IC documented within function, overall one can note expected counts derived contingency table (including marginal sums) drug, adverse event respectively. add_expected_counts-function single parameter, can used select want omit expected counts one available disproportionality estimators. Note IC default uses expected counts used Relative Reporting Rate (RRR).","code":"drug_event_df |> add_expected_counts(da_estimators = c(\"prr\", \"ror\", \"rrr\")) |> head(1) ## # A tibble: 1 × 14 ##   drug   event    obs n_drug n_event n_tot exp_rrr n_eve…¹ n_tot…² exp_prr     b ##   <chr>  <chr>  <int>  <int>   <int> <int>   <dbl>   <int>   <int>   <dbl> <int> ## 1 Drug_A Event…    21    359     174  1000    62.5     153     641    85.7   338 ## # … with 3 more variables: c <int>, d <int>, exp_ror <dbl>, and abbreviated ## #   variable names ¹​n_event_prr, ²​n_tot_prr"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"adding-the-disproportionality-estimators","dir":"Articles","previous_headings":"Disproportionality analysis from report-level data","what":"Adding the disproportionality estimators","title":"Disproportionality_analysis","text":"add_disproportionality()-function two parameters. One rule_of_N, default set 3, sometimes referred “rule three”. sets ROR PRR-values NA observed count less passed value. completeness, note default shrinkage IC acts built ‘rule 3’, .e. shrinkage +0.5 prevents lower bound exceed 0 default significance level 95%. second parameter controls rounding non-count values output, including expected counts, uncertainty bounds point estimates. default 2 digits kept. short, add_disproportionality wrapper around ror, prr ic. details around parameters, see documentation functions.","code":"## # A tibble: 1,279 × 23 ##    drug   event   obs n_drug n_event n_tot exp_rrr n_eve…¹ n_tot…² exp_prr     b ##    <chr>  <chr> <int>  <int>   <int> <int>   <dbl>   <int>   <int>   <dbl> <int> ##  1 Drug_A Even…    21    359     174  1000    62.5     153     641    85.7   338 ##  2 Drug_A Even…    21    359     155  1000    55.6     134     641    75.0   338 ##  3 Drug_C Even…    21    298     174  1000    51.9     153     702    64.9   277 ##  4 Drug_E Even…    21    279     186  1000    51.9     165     721    63.8   258 ##  5 Drug_D Even…    20    275     163  1000    44.8     143     725    54.2   255 ##  6 Drug_A Even…    19    359     186  1000    66.8     167     641    93.5   340 ##  7 Drug_A Even…    19    359     138  1000    49.5     119     641    66.6   340 ##  8 Drug_C Even…    19    298     163  1000    48.6     144     702    61.1   279 ##  9 Drug_E Even…    19    279     138  1000    38.5     119     721    46.0   260 ## 10 Drug_A Even…    18    359     163  1000    58.5     145     641    81.2   341 ## # … with 1,269 more rows, 12 more variables: c <int>, d <int>, exp_ror <dbl>, ## #   ic_lower <dbl>, ic <dbl>, ic_upper <dbl>, prr_lower <dbl>, prr <dbl>, ## #   prr_upper <dbl>, ror_lower <dbl>, ror <dbl>, ror_upper <dbl>, and ## #   abbreviated variable names ¹​n_event_prr, ²​n_tot_prr"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"technical-notes","dir":"Articles","previous_headings":"","what":"Technical notes","title":"Disproportionality_analysis","text":"timely execution, pvutils uses data.table-package counting.","code":""},{"path":"https://oskargauffin.github.io/pvutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oskar Gauffin. Maintainer.","code":""},{"path":"https://oskargauffin.github.io/pvutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gauffin O (2023). pvutils: Helpful Functions Pharmacogivilance. R package version 0.0.1, https://oskargauffin.github.io/pvutils/.","code":"@Manual{,   title = {pvutils: Helpful Functions for Pharmacogivilance},   author = {Oskar Gauffin},   year = {2023},   note = {R package version 0.0.1},   url = {https://oskargauffin.github.io/pvutils/}, }"},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for adding disproportionality estimates to data frame\ncontaining expected counts — add_disproportionality","title":"Wrapper for adding disproportionality estimates to data frame\ncontaining expected counts — add_disproportionality","text":"Wrapper adding disproportionality estimates data frame containing expected counts","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for adding disproportionality estimates to data frame\ncontaining expected counts — add_disproportionality","text":"","code":"add_disproportionality(   df,   da_estimators = c(\"ic\", \"prr\", \"ror\"),   rule_of_N = 3,   number_of_digits = 2,   ... )"},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for adding disproportionality estimates to data frame\ncontaining expected counts — add_disproportionality","text":"df data table, object possible convert data table, e.g. tibble data.frame. column specifications, see details. da_estimators Character vector, defaults c(\"ic\", \"prr\", \"ror\"). rule_of_N Numeric. protect spurious associations due small observed counts, prr ror point interval estimates set NA observed less equal value passed 'rule_of_N'. Defaults 3, 5 sometimes used. Set NULL want apply rule. number_of_digits Integer. Defaults 2. Set NULL avoid rounding. ... passing additional arguments, e.g. significance level.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for adding disproportionality estimates to data frame\ncontaining expected counts — add_disproportionality","text":"passed data frame additional columns specified parameters.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate counts required for expected counts, and expected counts — add_expected_counts","title":"Calculate counts required for expected counts, and expected counts — add_expected_counts","text":"Produces various counts used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate counts required for expected counts, and expected counts — add_expected_counts","text":"","code":"add_expected_counts(df, da_estimators = c(\"rrr\", \"prr\", \"ror\"))"},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate counts required for expected counts, and expected counts — add_expected_counts","text":"df data table, object possible convert data table, e.g. tibble data.frame. column specifications, see details. da_estimators character vector containing desired expected counts. Defaults possible options, .e. c(\"rrr\", \"prr\", \"ror\").","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate counts required for expected counts, and expected counts — add_expected_counts","text":"tibble counts.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate counts required for expected counts, and expected counts — add_expected_counts","text":"passed data table contain three columns: \"report_id\", \"drug_name\" \"event_name\". one row per reported drug-event-combination, .e. receiving additional report drug event 1 add one row table. report_id can occur several rows, report contains several drugs /events. Column report_id must type numeric character. Columns drug_name event_name must characters.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ic.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for Information Component (IC) — ci_for_ic","title":"Confidence intervals for Information Component (IC) — ci_for_ic","text":"Mainly used link{ic}. Produces quantiles posterior gamma distribution. Called twice ic create credibility interval.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for Information Component (IC) — ci_for_ic","text":"","code":"ci_for_ic(obs, exp, sign_lvl_probs, shrinkage)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for Information Component (IC) — ci_for_ic","text":"obs numeric vector observed counts, .e. number reports selected drug-event-combination. Note shrinkage (e.g. +0.5) added inside function included . exp numeric vector expected counts, .e. number reports expected given comparator background. Note shrinkage (e.g. +0.5) added inside function included . sign_lvl_probs probabilities posterior, based passed significance level (sign_lvl) ic. instance, sgn_lvl = .95 ic used, quantiles extracted sgn_lvl_probs 0.025 0.975. shrinkage non-negative numeric length 1, added observed expected count. Default 0.5.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_prr.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","title":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","text":"Mainly use prr. Produces (symmetric, normality based) confidence bounds PRR, passed probability. Called twice prr create confidence intervals.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_prr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","text":"","code":"ci_for_prr(obs, n_drug, n_event_prr, n_tot_prr, sign_lvl_probs)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_prr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","text":"obs Number reports specific drug event (.e. observed count). n_drug Number reports drug, without event n_event_prr Number reports event background. n_tot_prr Number reports background. sign_lvl_probs probabilities normal distribution, based passed significance level (sign_lvl) prr. sgn_lvl = .95 prr, quantiles normal distribution extracted sgn_lvl_probs 0.025 0.975.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","title":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","text":"Mainly use ror. Produces (symmetric, normality based) confidence bounds ROR, passed probability. Called twice ror create confidence intervals.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","text":"","code":"ci_for_ror(a, b, c, d, sign_lvl_probs)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","text":"Number reports specific drug event (.e. observed count). b Number reports drug, without event c Number reports without drug, event d Number reports without drug, without event sign_lvl_probs probabilities normal distribution, based passed significance level (sign_lvl) ror. sgn_lvl = .95 ror, quantiles normal distribution extracted sgn_lvl_probs 0.025 0.975.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Get custom colours — custom_colours","title":"Get custom colours — custom_colours","text":"far, function provides hex codes blue green \"Uppsala Monitoring Centre - style\"","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get custom colours — custom_colours","text":"","code":"custom_colours(colour = c(\"blue\", \"green\"))"},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get custom colours — custom_colours","text":"colour character string, must either \"blue\" \"green\".","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get custom colours — custom_colours","text":"hex code string.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get custom colours — custom_colours","text":"","code":"par(lwd = 5) hist(runif(30),   col = pvutils::custom_colours(\"blue\"),   border = pvutils::custom_colours(\"green\") )"},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_ggtheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Add custom colour theme — custom_ggtheme","title":"Add custom colour theme — custom_ggtheme","text":"function provides custom colour ggplot2-theme blue green \"Uppsala Monitoring Centre - style\"","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_ggtheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add custom colour theme — custom_ggtheme","text":"","code":"custom_ggtheme()"},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_ggtheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add custom colour theme — custom_ggtheme","text":"None","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/custom_ggtheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add custom colour theme — custom_ggtheme","text":"","code":"library(\"ggplot2\") ggplot(mtcars, aes(mpg, disp)) +   geom_point() +   pvutils::custom_ggtheme()"},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated ICSR database — drug_event_df","title":"A simulated ICSR database — drug_event_df","text":"drug_event_df contains report_ids drugs events. can use package tools arrive instance observed counts disproportionality analysis-estimates.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated ICSR database — drug_event_df","text":"","code":"drug_event_df"},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A simulated ICSR database — drug_event_df","text":"`drug_event_df` data frame 3,971 rows 3 columns. total 1000 unique report_ids, .e. report_id can several drugs events. Number drugs per report_id sampled 1 + Pois(3), increasing probability drug letter closes Z. Every drug assigned event, decreasing probability event index number increases towards 1000. See DATASET.R file data-raw folder details. report_id patient report identifier drug One 26 fake drugs (Drug_A - Drug_Z) event Sampled events (Event_1 - Event_1000)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A simulated ICSR database — drug_event_df","text":"Simulated data.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":null,"dir":"Reference","previous_headings":"","what":"Information component — ic","title":"Information component — ic","text":"Calculates information component (\"IC\") credibility interval, used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information component — ic","text":"","code":"ic(obs, exp, shrinkage = 0.5, sign_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information component — ic","text":"obs numeric vector observed counts, .e. number reports selected drug-event-combination. Note shrinkage (e.g. +0.5) added inside function included . exp numeric vector expected counts, .e. number reports expected given comparator background. Note shrinkage (e.g. +0.5) added inside function included . shrinkage non-negative numeric length 1, added observed expected count. Default 0.5. sign_lvl Significance level credibility interval. Default 0.95 (.e. 95 % credibility interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information component — ic","text":"tibble three columns (point estimate credibility bounds).","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information component — ic","text":"IC based relative reporting rate (RRR), modified addition \"shrinkage\" (typically 0.5) protect spurious associations. $$\\hat{IC} = log_{2}(\\frac{\\hat{O}+0.5}{\\hat{E}+0.5})$$ \\(\\hat{O}\\) = observed number reports, expected \\(\\hat{E}\\) (RRR, using entire database background) estimated $$ \\hat{E} = \\frac{N_{drug} \\times N_{event}}{N_{TOT}}$$ µ \\(N_{drug}\\), \\(N_{event}\\) \\(N_{TOT}\\) number repµorts drug, event, whole database respectively. bayesian perspective, credibility interval IC constructed poisson-gamma conjugacy. shrinkage prior distribution observed expected equal 0.5. point \\(log_{2}\\) provide log-scale convenient plotting multiple IC values side--side. Note: function vectorized, .e. obs exp can vectors, see examples.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information component — ic","text":"","code":"pvutils::ic(obs = 20, exp = 10) #> # A tibble: 1 × 3 #>   ic_lower    ic ic_upper #>      <dbl> <dbl>    <dbl> #> 1    0.264 0.965     1.53  # Note that obs and exp can be vectors (of equal length, no recycling) pvutils::ic(obs = c(20, 30), exp = c(10, 10)) #> # A tibble: 2 × 3 #>   ic_lower    ic ic_upper #>      <dbl> <dbl>    <dbl> #> 1    0.264 0.965     1.53 #> 2    0.976 1.54      2.01"},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportional Reporting Rate — prr","title":"Proportional Reporting Rate — prr","text":"Calculates Proportional Reporting Rate (\"PRR\") confidence intervals, used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportional Reporting Rate — prr","text":"","code":"prr(obs, n_drug, n_event_prr, n_tot_prr, sign_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportional Reporting Rate — prr","text":"obs Number reports specific drug event (.e. observed count). n_drug Number reports drug, without event n_event_prr Number reports event background. n_tot_prr Number reports background. sign_lvl Significance level confidence interval. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportional Reporting Rate — prr","text":"tibble three columns (point estimate credibility bounds). Number rows equals length inputs obs, n_drug, n_event_prr n_tot_prr.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportional Reporting Rate — prr","text":"PRR proportion reports event set exposed cases, divided proportion reports event background comparator, include exposed. Reporting highlights correct interpretation, examining reporting PRR calculated reporting database. Note: function vectorized, see examples.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportional Reporting Rate — prr","text":"","code":"pvutils::prr(obs = 5, n_drug = 10, n_event_prr = 20, n_tot_prr = 10000) #> # A tibble: 1 × 3 #>   prr_lower   prr prr_upper #>       <dbl> <dbl>     <dbl> #> 1      78.4 0.001      797.  # Note that input parameters can be vectors (of equal length, no recycling) pvutils::prr(   obs = c(5, 10),   n_drug = c(10, 20),   n_event_prr = c(15, 30),   n_tot_prr = c(10000, 10000) ) #> # A tibble: 2 × 3 #>   prr_lower     prr prr_upper #>       <dbl>   <dbl>     <dbl> #> 1     102.  0.00075     1092. #> 2      72.0 0.0015       386."},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Reporting Odds Ratio — ror","title":"Reporting Odds Ratio — ror","text":"Calculates Reporting Odds Ratio (\"ROR\") confidence intervals, used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting Odds Ratio — ror","text":"","code":"ror(a, b, c, d, sign_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting Odds Ratio — ror","text":"Number reports specific drug event (.e. observed count). b Number reports drug, without event c Number reports without drug, event d Number reports without drug, without event sign_lvl Significance level confidence interval. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reporting Odds Ratio — ror","text":"tibble three columns (point estimate credibility bounds). Number rows equals length inputs , b, c, d.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reporting Odds Ratio — ror","text":"ROR odds ratio calculated reporting counts. R Reporting ROR meant emphasize interpretation reporting, ROR calculated reporting database. Note: function vectorized, .e. , b, c d can vectors, see examples.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reporting Odds Ratio — ror","text":"","code":"pvutils::ror(a = 5, b = 10, c = 20, d = 10000) #> # A tibble: 1 × 3 #>   ror_lower   ror ror_upper #>       <dbl> <dbl>     <dbl> #> 1      78.4   250      797.  # Note that a, b, c and d can be vectors (of equal length, no recycling) pvutils::ror(a = c(5, 10), b = c(10, 20), c = c(15, 30), d = c(10000, 10000)) #> # A tibble: 2 × 3 #>   ror_lower   ror ror_upper #>       <dbl> <dbl>     <dbl> #> 1     102.   333.     1092. #> 2      72.0  167.      386."}]
