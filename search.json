[{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://oskargauffin.github.io/pvutils/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"disproportionality-analysis-for-a-specific-drug-event-combination","dir":"Articles","previous_headings":"","what":"Disproportionality analysis for a specific drug-event combination","title":"Disproportionality_analysis","text":"first use-case functions provide way calculate confidence credibility intervals specific drug-event-combination, already know number observed reports, required counts database total count, number reports exposure number reports event. details specific input parameters, consult documentation function.","code":"library(pvutils) ## Under development. Report issues at https://github.com/OskarGauffin/pvutils prr(obs = 10, n_drug = 1000, n_event_prr = 200, n_tot_prr = 10000) ## # A tibble: 1 × 3 ##   prr2.5    prr prr97.5 ##    <dbl>  <dbl>   <dbl> ## 1  0.266 0.0002   0.940 ror(a = 10, b = 20, c = 200, d = 10000) ## # A tibble: 1 × 3 ##   ror2.5   ror ror97.5 ##    <dbl> <dbl>   <dbl> ## 1   11.6    25    54.1 ic(obs = 10, exp = 5) ## # A tibble: 1 × 3 ##     ic2.5    ic ic97.5 ##     <dbl> <dbl>  <dbl> ## 1 -0.0973 0.933   1.69"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"disproportionality-analysis-from-report-level-data","dir":"Articles","previous_headings":"","what":"Disproportionality analysis from report-level data","title":"Disproportionality_analysis","text":"aim screen wide range drug-event pairs report-level data using disproportionality analysis, handled function . package contains simulated data set ‘drug_event_df’. simplicity, drugs named Drug_A - Drug_Z, events named Event_1 - Event_1000. details proportions drug event described data object (execute ). pass data function calculates expected counts, function adds columns contaning disproportionality. now step steps detail.","code":"# drug_event_df |> #   add_expected_counts() |> #   add_disproportionality()"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"passing-a-correctly-structured-input-data","dir":"Articles","previous_headings":"Disproportionality analysis from report-level data","what":"Passing a correctly structured input data","title":"Disproportionality_analysis","text":"important report-level data structured correctly. Every line passed data frame corresponds drug-event pair report. drug_event_df-example data, first three rows drug_event_df report, report_id = 1. first row reports Drug_D adverse event named Event_5.next three rows another report, instance drug B reported two different events, event 15 event 33. completeness, note drug-event pair occurs several times one report, drug-event pair contributes counts . , observed count five means five different reports containing drug-event-pair, e.g. single report contained drug-event pair five times.","code":"drug_event_df[1:6, ] ## # A tibble: 6 × 3 ##   report_id drug   event    ##       <int> <chr>  <chr>    ## 1         1 Drug_D Event_5  ## 2         1 Drug_G Event_56 ## 3         1 Drug_O Event_89 ## 4         2 Drug_A Event_33 ## 5         2 Drug_B Event_15 ## 6         2 Drug_B Event_28"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"counting-the-expected","dir":"Articles","previous_headings":"Disproportionality analysis from report-level data","what":"Counting the expected","title":"Disproportionality_analysis","text":"details PRR, RRR IC documented within function, overall one can note expected counts derived contingency table (including marginal sums) drug, adverse event respectively. -function single parameter, can used turn calculation expected counts specific estimators. Note IC tradition uses expected counts referred Relative Reporting Rate (RRR).","code":"# drug_event_df |> #   add_expected_counts(expected_count_estimators = c(\"prr\", \"ror\", \"rrr\")) |> #   head(1)"},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"adding-the-disproportionality-estimators","dir":"Articles","previous_headings":"Disproportionality analysis from report-level data","what":"Adding the disproportionality estimators","title":"Disproportionality_analysis","text":"function parameter, default includes IC, PRR ROR. wanted, just pass desired estimators instead. function two parameters. One , default set 3, sometimes referred “rule three”. sets ROR PRR-values NA observed count less specified N. completeness, note default shrinkage IC acts built ‘rule 3’, .e. shrinkage +0.5 prevents lower bound exceed 0 default significance level 95%. second parameter controls rounding non-count values output, including expected counts, uncertainty bounds point estimates. default 2 digits kept. short, add_disproportionality wrapper around ror, prr ic. details around estimators, see documentation corresponding function.","code":""},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"subgroup-analysis","dir":"Articles","previous_headings":"","what":"Subgroup analysis","title":"Disproportionality_analysis","text":"disproportionality builds comparator passed data, subgroup analysis e.g. specific age groups achieved filtering group interest, passing da.","code":""},{"path":"https://oskargauffin.github.io/pvutils/articles/Disproportionality_analysis.html","id":"execution-speed","dir":"Articles","previous_headings":"","what":"Execution speed","title":"Disproportionality_analysis","text":"data.table-package (dtplyr) used fast execution. test execution speed made using vaers R package, available gitlab. vaers package contains data VAERS years 1990 - 2018, resulting 4 146 778 rows processed da pvutils. Execution regular laptop took less 7 seconds.","code":""},{"path":"https://oskargauffin.github.io/pvutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oskar Gauffin. Maintainer.","code":""},{"path":"https://oskargauffin.github.io/pvutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gauffin O (2023). pvutils: Helpful Functions Pharmacogivilance. R package version 0.0.1, https://oskargauffin.github.io/pvutils/.","code":"@Manual{,   title = {pvutils: Helpful Functions for Pharmacogivilance},   author = {Oskar Gauffin},   year = {2023},   note = {R package version 0.0.1},   url = {https://oskargauffin.github.io/pvutils/}, }"},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":null,"dir":"Reference","previous_headings":"","what":"Add disproportionality estimates to data frame\nwith expected counts — add_disproportionality","title":"Add disproportionality estimates to data frame\nwith expected counts — add_disproportionality","text":"Add disproportionality estimates data frame expected counts","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add disproportionality estimates to data frame\nwith expected counts — add_disproportionality","text":"","code":"add_disproportionality(   df = NULL,   da_estimators = c(\"ic\", \"prr\", \"ror\"),   rule_of_N = 3,   number_of_digits = 2,   conf_lvl = 0.95 )"},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add disproportionality estimates to data frame\nwith expected counts — add_disproportionality","text":"df Intended use output tibble add_expected_counts. da_estimators Character vector specifying disproportionality estimators use, case need implemented options. Defaults c(\"ic\", \"prr\", \"ror\"). rule_of_N Numeric value. Sets estimates ROR PRR NA observed counts strictly less passed value rule_of_N. Default value 3, 5 sometimes used liberal alternative. Set NULL want apply rule. number_of_digits Numeric value. Set number digits show output passing integer. Default value 2 digits. Set NULL avoid rounding. conf_lvl Confidencelevel confidence credibility intervals. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_disproportionality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add disproportionality estimates to data frame\nwith expected counts — add_disproportionality","text":"passed data frame disproportionality point interval estimates.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces expected counts — add_expected_counts","title":"Produces expected counts — add_expected_counts","text":"Produces various counts used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces expected counts — add_expected_counts","text":"","code":"add_expected_counts(   df = NULL,   df_colnames = NULL,   expected_count_estimators = c(\"rrr\", \"prr\", \"ror\") )"},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces expected counts — add_expected_counts","text":"df object possible convert data table, e.g. tibble data.frame, containing patient level reported drug-event-pairs. See details. df_colnames Provide list column names variables use passed df`.e. point da column report_ids (report_id), drug names (drug), adverse event names (event) optionally subgroups calculate disproportionality across group_by. See examples. expected_count_estimators character vector containing desired expected count estimators. Defaults implemented options, .e. c(\"rrr\", \"prr\", \"ror\").","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produces expected counts — add_expected_counts","text":"tibble containing various counts.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/add_expected_counts.html","id":"the-df-object","dir":"Reference","previous_headings":"","what":"The df object","title":"Produces expected counts — add_expected_counts","text":"passed df (convertible ) data table least contain three  columns: report_id, drug event. data table contain one row  per reported drug-event-combination, .e. receiving single additional report  drug X event Y add one row table. single report  contained drug X event Y event Z, two rows added,  report_id drug rows. Column report_id must type  numeric character. Columns drug event must type character.  can use names columns, long specify df_colnames.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ic.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for Information Component (IC) — ci_for_ic","title":"Confidence intervals for Information Component (IC) — ci_for_ic","text":"Mainly used link{ic}. Produces quantiles posterior gamma distribution. Called twice ic create credibility interval.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for Information Component (IC) — ci_for_ic","text":"","code":"ci_for_ic(obs, exp, conf_lvl_probs, shrinkage)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for Information Component (IC) — ci_for_ic","text":"obs numeric vector observed counts, .e. number reports selected drug-event-combination. Note shrinkage (e.g. +0.5) added inside function included . exp numeric vector expected counts, .e. number reports expected given comparator background. Note shrinkage (e.g. +0.5) added inside function included . conf_lvl_probs probabilities posterior, based passed confidence level (conf_lvl) ic. instance, sgn_lvl = .95 ic used, quantiles extracted sgn_lvl_probs 0.025 0.975. shrinkage non-negative numeric value, added observed expected count. Default 0.5.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_prr.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","title":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","text":"Mainly use prr. Produces (symmetric, normality based) confidence bounds PRR, passed probability. Called twice prr create confidence intervals.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_prr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","text":"","code":"ci_for_prr(obs, n_drug, n_event_prr, n_tot_prr, conf_lvl_probs)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_prr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for Proportional Reporting Rate — ci_for_prr","text":"obs Number reports specific drug event (.e. observed count). n_drug Number reports drug, without event n_event_prr Number reports event background. n_tot_prr Number reports background. conf_lvl_probs probabilities normal distribution, based passed confidence level (conf_lvl) prr. sgn_lvl = .95 prr, quantiles normal distribution extracted sgn_lvl_probs 0.025 0.975.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","title":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","text":"Mainly use ror. Produces (symmetric, normality based) confidence bounds ROR, passed probability. Called twice ror create confidence intervals.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","text":"","code":"ci_for_ror(a, b, c, d, conf_lvl_probs)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ci_for_ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence intervals for Reporting Odds Ratio — ci_for_ror","text":"Number reports specific drug event (.e. observed count). b Number reports drug, without event c Number reports without drug, event d Number reports without drug, without event conf_lvl_probs probabilities normal distribution, based passed confidence level (conf_lvl) ror. sgn_lvl = .95 ror, quantiles normal distribution extracted sgn_lvl_probs 0.025 0.975.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/conf_lvl_to_quantile_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile probabilities from confidence level — conf_lvl_to_quantile_prob","title":"Quantile probabilities from confidence level — conf_lvl_to_quantile_prob","text":"Calculates equi-tailed quantile probabilities confidence level","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/conf_lvl_to_quantile_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile probabilities from confidence level — conf_lvl_to_quantile_prob","text":"","code":"conf_lvl_to_quantile_prob(conf_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/conf_lvl_to_quantile_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile probabilities from confidence level — conf_lvl_to_quantile_prob","text":"conf_lvl Confidencelevel confidence credibility intervals. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/conf_lvl_to_quantile_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile probabilities from confidence level — conf_lvl_to_quantile_prob","text":"list two numerical vectors, \"lower\" \"upper\".","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/conf_lvl_to_quantile_prob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile probabilities from confidence level — conf_lvl_to_quantile_prob","text":"","code":"conf_lvl_to_quantile_prob(0.95) #> $lower #> [1] 0.025 #>  #> $upper #> [1] 0.975 #>"},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_prr.html","id":null,"dir":"Reference","previous_headings":"","what":"Count expected for Proportional Reporting Rate — count_expected_prr","title":"Count expected for Proportional Reporting Rate — count_expected_prr","text":"Internal function provide expected counts related PRR","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_prr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count expected for Proportional Reporting Rate — count_expected_prr","text":"","code":"count_expected_prr(count_dt)"},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_prr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count expected for Proportional Reporting Rate — count_expected_prr","text":"count_dt data table, output count_expected_rrr","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_prr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count expected for Proportional Reporting Rate — count_expected_prr","text":"data table added columns n_event_prr n_tot_prr expected_prr","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Count expected for Reporting Odds Ratio — count_expected_ror","title":"Count expected for Reporting Odds Ratio — count_expected_ror","text":"Internal function provide expected counts related ROR","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count expected for Reporting Odds Ratio — count_expected_ror","text":"","code":"count_expected_ror(count_dt)"},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count expected for Reporting Odds Ratio — count_expected_ror","text":"count_dt data table, output count_expected_rrr","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_ror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count expected for Reporting Odds Ratio — count_expected_ror","text":"data table added columns n_event_prr, n_tot_prr expected_prr OUTPUT_DESCRIPTION","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_ror.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count expected for Reporting Odds Ratio — count_expected_ror","text":"DETAILS","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_rrr.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Expected for Relative Reporting Rate — count_expected_rrr","title":"Count Expected for Relative Reporting Rate — count_expected_rrr","text":"Internal function provide expected counts related RRR","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_rrr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Expected for Relative Reporting Rate — count_expected_rrr","text":"","code":"count_expected_rrr(df_colnames, df)"},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_rrr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Expected for Relative Reporting Rate — count_expected_rrr","text":"df_colnames description added df See documentation add_expected_counts","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/count_expected_rrr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Expected for Relative Reporting Rate — count_expected_rrr","text":"data frame columns obs, n_drug, n_event, n_tot (RRR) expected","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/da.html","id":null,"dir":"Reference","previous_headings":"","what":"Disproportionality Analysis — da","title":"Disproportionality Analysis — da","text":"da used execute disproportionality analysis, potentially across subgroups (see parameter group_by), using Information Component (IC), Proportional Reporting Rate (PRR) /Reporting Odds Ratio (ROR).","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/da.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disproportionality Analysis — da","text":"","code":"da(   df = NULL,   df_colnames = list(report_id = \"report_id\", drug = \"drug\", event = \"event\", group_by =     NULL),   da_estimators = c(\"ic\", \"prr\", \"ror\"),   rule_of_N = 3,   conf_lvl = 0.95,   number_of_digits = 2,   excel_path = NULL )"},{"path":"https://oskargauffin.github.io/pvutils/reference/da.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disproportionality Analysis — da","text":"df object possible convert data table, e.g. tibble data.frame, containing patient level reported drug-event-pairs. See details. df_colnames Provide list column names variables use passed df`.e. point da column report_ids (report_id), drug names (drug), adverse event names (event) optionally subgroups calculate disproportionality across group_by. See examples. da_estimators Character vector specifying disproportionality estimators use, case need implemented options. Defaults c(\"ic\", \"prr\", \"ror\"). rule_of_N Numeric value. Sets estimates ROR PRR NA observed counts strictly less passed value rule_of_N. Default value 3, 5 sometimes used liberal alternative. Set NULL want apply rule. conf_lvl Confidencelevel confidence credibility intervals. Default 0.95 (.e. 95 % confidence interval) number_of_digits Numeric value. Set number digits show output passing integer. Default value 2 digits. Set NULL avoid rounding. excel_path write output da excel file, provide path folder e.g. write current working directory, pass getwd().  excel file default named da.xlsx. control excel file name,  pass path ending desired filename suffixed .xlsx.  want export output excel file, pass NULL (default).","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/da.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disproportionality Analysis — da","text":"da returns data frame (invisibly) containing counts estimates related supported disproportionality estimators. row corresponds drug-event pair.","code":""},{"path":[]},{"path":"https://oskargauffin.github.io/pvutils/reference/da.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disproportionality Analysis — da","text":"","code":"### Run a disproportionality analysis da_1 <- drug_event_df |> da()  ### Run a disproportionality analysis on a data frame with your own column names # Create the list with colnames for the data your_own_colnames <- list(report_id = \"repId\",      drug = \"drug\",      event = \"event\",      group_by = NULL)  # Rename the report_id variable and run again drug_event_df |> dplyr::rename(repId = report_id) |> da(df_colnames = your_own_colnames)  ### Run a disproportionality across two subgroups # Create two groups (even/uneven report_ids) in drug_event_df drug_event_df_with_grouping  <- drug_event_df |> dplyr::mutate(\"group\" = report_id %% 2)  # Set the colname for the group_by-parameter to \"group\" your_own_colnames <-      list(report_id = \"report_id\",           drug = \"drug\",           event = \"event\",           group_by = \"group\")  # Execute da across the subgroups da_2 <- drug_event_df_with_grouping |> da(df_colnames = your_own_colnames)"},{"path":"https://oskargauffin.github.io/pvutils/reference/da_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"An internal function creating colnames for da confidence/credibility bounds — da_colnames","title":"An internal function creating colnames for da confidence/credibility bounds — da_colnames","text":"Given output quantile_prob, da_name string, create column names PRR025, ROR025 IC025","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/da_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An internal function creating colnames for da confidence/credibility bounds — da_colnames","text":"","code":"da_colnames(quantile_prob = list(lower = 0.025, upper = 0.975), da_name = NULL)"},{"path":"https://oskargauffin.github.io/pvutils/reference/da_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An internal function creating colnames for da confidence/credibility bounds — da_colnames","text":"quantile_prob list two parameters, lower upper. Default: list(lower = 0.025, upper = 0.975) da_name string, \"ic\", \"prr\" \"ror\". Default: NULL","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/da_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An internal function creating colnames for da confidence/credibility bounds — da_colnames","text":"list two symbols, inserted dtplyr-chain","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated ICSR database — drug_event_df","title":"A simulated ICSR database — drug_event_df","text":"drug_event_df contains report_ids drugs events. can use package tools arrive instance observed counts disproportionality analysis-estimates.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated ICSR database — drug_event_df","text":"","code":"drug_event_df"},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A simulated ICSR database — drug_event_df","text":"`drug_event_df` data frame 3,971 rows 3 columns. total 1000 unique report_ids, .e. report_id can several drugs events. Number drugs per report_id sampled 1 + Pois(3), increasing probability drug letter closes Z. Every drug assigned event, decreasing probability event index number increases towards 1000. See DATASET.R file data-raw folder details. report_id patient report identifier drug One 26 fake drugs (Drug_A - Drug_Z) event Sampled events (Event_1 - Event_1000)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/drug_event_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A simulated ICSR database — drug_event_df","text":"Simulated data.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/grouped_da.html","id":null,"dir":"Reference","previous_headings":"","what":"Disproportionality Analysis by Subgroups — grouped_da","title":"Disproportionality Analysis by Subgroups — grouped_da","text":"package internal wrapper executing da across subgroups","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/grouped_da.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disproportionality Analysis by Subgroups — grouped_da","text":"","code":"grouped_da(   df = NULL,   df_colnames = NULL,   group_by = NULL,   expected_count_estimators = NULL,   da_estimators = NULL,   conf_lvl = NULL,   rule_of_N = NULL,   number_of_digits = NULL )"},{"path":"https://oskargauffin.github.io/pvutils/reference/grouped_da.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disproportionality Analysis by Subgroups — grouped_da","text":"df See da function df_colnames See da function group_by convenience, df_colnames$group_by passed separate parameter expected_count_estimators See da function da_estimators See da function conf_lvl See da function rule_of_N See da function number_of_digits See da function","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/grouped_da.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disproportionality Analysis by Subgroups — grouped_da","text":"See da function","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/grouped_da.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Disproportionality Analysis by Subgroups — grouped_da","text":"See da documentation","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":null,"dir":"Reference","previous_headings":"","what":"Information component — ic","title":"Information component — ic","text":"Calculates information component (\"IC\") credibility interval, used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information component — ic","text":"","code":"ic(obs = NULL, exp = NULL, shrinkage = 0.5, conf_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information component — ic","text":"obs numeric vector observed counts, .e. number reports selected drug-event-combination. Note shrinkage (e.g. +0.5) added inside function included . exp numeric vector expected counts, .e. number reports expected given comparator background. Note shrinkage (e.g. +0.5) added inside function included . shrinkage non-negative numeric value, added observed expected count. Default 0.5. conf_lvl Confidencelevel confidence credibility intervals. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information component — ic","text":"tibble three columns (point estimate credibility bounds).","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Information component — ic","text":"IC log2-transformed observed--expected ratio, based relative reporting rate (RRR) counts, modified addition \"shrinkage\" protect spurious associations. $$\\hat{IC} = log_{2}(\\frac{\\hat{O}+k}{\\hat{E}+k})$$ \\(\\hat{O}\\) = observed number reports, \\(k\\) shrinkage (typically +0.5), expected \\(\\hat{E}\\) (RRR, using entire database comparator background) estimated $$ \\hat{E} = \\frac{\\hat{N}_{drug} \\times \\hat{N}_{event}}{\\hat{N}_{TOT}}$$ \\(\\hat{N}_{drug}\\), \\(\\hat{N}_{event}\\) \\(\\hat{N}_{TOT}\\) number reports drug, event, whole database respectively. credibility interval created quantiles posterior gamma distribution shape (\\(\\hat{S}\\)) rate (\\(\\hat{R}\\)) parameters $$\\hat{S} = \\hat{O} + k$$ $$\\hat{R} = \\hat{E} + k$$ using stats::qgamma function. Parameter \\(k\\) shrinkage defined earlier. completeness, credibility interval gamma distributed \\(X\\) (.e. \\(X \\sim \\Gamma(\\hat{S}, \\hat{R})\\) \\(\\hat{S}\\) \\(\\hat{R}\\) shape rate parameters) associated quantile function \\(Q_X(p)\\) significance level \\(\\alpha\\) constructed $$[Q_X(\\alpha/2), Q_X(1-\\alpha/2)]$$","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"further-details","dir":"Reference","previous_headings":"","what":"Further details","title":"Information component — ic","text":"bayesian point--view, credibility interval IC constructed poisson-gamma conjugacy. shrinkage constitutes prior observed expected 0.5. shrinkage +0.5 gamma-quantile based 95 % credibility interval lower bound 0 unless observed count exceeds 3. One benefit \\(log_{2}\\) provide log-scale convenient plotting multiple IC values side--side.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Information component — ic","text":"Norén GN, Hopstadius J, Bate (2011). “Shrinkage observed--expected ratios robust transparent large-scale pattern discovery.” Statistical Methods Medical Research, 22(1), 57--69. doi:10.1177/0962280211403604 , https://doi.org/10.1177/0962280211403604.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information component — ic","text":"","code":"ic(obs = 20, exp = 10) #> # A tibble: 1 × 3 #>   ic2.5    ic ic97.5 #>   <dbl> <dbl>  <dbl> #> 1 0.264 0.965   1.53  # Note that obs and exp can be vectors (of equal length, no recycling allowed) ic(obs = c(20, 30), exp = c(10, 10)) #> # A tibble: 2 × 3 #>   ic2.5    ic ic97.5 #>   <dbl> <dbl>  <dbl> #> 1 0.264 0.965   1.53 #> 2 0.976 1.54    2.01"},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportional Reporting Rate — prr","title":"Proportional Reporting Rate — prr","text":"Calculates Proportional Reporting Rate (\"PRR\") confidence intervals, used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportional Reporting Rate — prr","text":"","code":"prr(obs, n_drug, n_event_prr, n_tot_prr, conf_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportional Reporting Rate — prr","text":"obs Number reports specific drug event (.e. observed count). n_drug Number reports drug, without event n_event_prr Number reports event background. n_tot_prr Number reports background. conf_lvl Confidencelevel confidence credibility intervals. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportional Reporting Rate — prr","text":"tibble three columns (point estimate credibility bounds). Number rows equals length inputs obs, n_drug, n_event_prr n_tot_prr.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Proportional Reporting Rate — prr","text":"PRR proportion reports event set exposed cases, divided proportion reports event background comparator, include exposed. PRR estimated observed--expected ratio, based similar RRR IC, excludes exposure interest comparator. $$\\hat{PRR} = \\frac{\\hat{O}}{\\hat{E}}$$ \\(\\hat{O}\\) observed number reports, expected \\(\\hat{E}\\) estimated $$\\hat{E} = \\frac{\\hat{N}_{drug} \\times (\\hat{N}_{event} - \\hat{O})}{\\hat{N}_{TOT}-\\hat{N}_{drug}}$$ \\(\\hat{N}_{drug}\\), \\(\\hat{N}_{event}\\), \\(\\hat{O}\\) \\(\\hat{N}_{TOT}\\) number reports drug, event, drug event, whole database respectively. confidence interval derived Gravel (2009), using delta method: $$\\hat{s} = \\sqrt{ 1/\\hat{O} - 1/(\\hat{N}_{drug}) + 1/(\\hat{N}_{event} - \\hat{O}) - 1/(\\hat{N}_{TOT} - \\hat{N}_{drug})}$$ $$[\\hat{CI}_{\\alpha/2}, \\hat{CI}_{1-\\alpha/2}] = $$ $$[\\frac{\\hat{O}}{\\hat{E}} \\times \\exp(\\Phi_{\\alpha/2} \\times \\hat{s}), \\frac{\\hat{O}}{\\hat{E}} \\times \\exp(\\Phi_{1-\\alpha/2} \\times \\hat{s})]$$ Another version standard deviation sometimes used last fraction added rather subtracted, negligible practical implications.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Proportional Reporting Rate — prr","text":"Montastruc J, Sommet , Bagheri H, Lapeyre-Mestre M (2011). “Benefits strengths disproportionality analysis identification adverse drug reactions pharmacovigilance database.” British Journal Clinical Pharmacology, 72(6), 905--908. doi:10.1111/j.1365-2125.2011.04037.x , https://doi.org/10.1111/j.1365-2125.2011.04037.x. Gravel C (2009). “Statistical Methods Signal Detection Pharmacovigilance.” https://curve.carleton.ca/system/files/etd/0345d1f0-ce28-44e1-90f8-dcd69204eb28/etd_pdf/db3b8c9bdc8c75ca3c4001018b842433/gravel-statisticalmethodsforsignaldetectioninpharmacovigilance.pdf .","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/prr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportional Reporting Rate — prr","text":"","code":"pvutils::prr(obs = 5, n_drug = 10, n_event_prr = 20, n_tot_prr = 10000) #> # A tibble: 1 × 3 #>   prr2.5   prr prr97.5 #>    <dbl> <dbl>   <dbl> #> 1   117. 0.001    534.  # Note that input parameters can be vectors (of equal length, no recycling) pvutils::prr(   obs = c(5, 10),   n_drug = c(10, 20),   n_event_prr = c(15, 30),   n_tot_prr = c(10000, 10000) ) #> # A tibble: 2 × 3 #>   prr2.5     prr prr97.5 #>    <dbl>   <dbl>   <dbl> #> 1  150.  0.00075    742. #> 2   94.7 0.0015     293."},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":null,"dir":"Reference","previous_headings":"","what":"Reporting Odds Ratio — ror","title":"Reporting Odds Ratio — ror","text":"Calculates Reporting Odds Ratio (\"ROR\") confidence intervals, used disproportionality analysis.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reporting Odds Ratio — ror","text":"","code":"ror(a = NULL, b = NULL, c = NULL, d = NULL, conf_lvl = 0.95)"},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reporting Odds Ratio — ror","text":"Number reports specific drug event (.e. observed count). b Number reports drug, without event c Number reports without drug, event d Number reports without drug, without event conf_lvl Confidencelevel confidence credibility intervals. Default 0.95 (.e. 95 % confidence interval)","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reporting Odds Ratio — ror","text":"tibble three columns (point estimate credibility bounds). Number rows equals length inputs , b, c, d.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reporting Odds Ratio — ror","text":"ROR odds ratio calculated reporting counts. R Reporting ROR meant emphasize interpretation reporting, ROR calculated reporting database. Note: function vectorized, .e. , b, c d can vectors, see examples. reporting odds ratio simply odds ratio based adverse event reports. $$\\hat{ROR} = \\frac{/b}{c/d}$$ \\(\\) = observed count (.e. number reports exposure outcome), \\(b\\) = number reports drug without event, \\(c\\) = number reports without drug event \\(d\\) = number reports neither drug event. confidence interval ROR can derived delta method, standard deviation: $$\\hat{s} = \\sqrt{1/+ 1/b + 1/c + 1/d}$$ resulting confidence interval significance level \\(\\alpha\\) $$[\\hat{ROR} \\times exp(\\Phi_{\\alpha/2} \\times \\hat{s}), \\hat{ROR} \\times exp(\\Phi_{1-\\alpha/2} \\times \\hat{s})]$$","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reporting Odds Ratio — ror","text":"Montastruc J, Sommet , Bagheri H, Lapeyre-Mestre M (2011). “Benefits strengths disproportionality analysis identification adverse drug reactions pharmacovigilance database.” British Journal Clinical Pharmacology, 72(6), 905--908. doi:10.1111/j.1365-2125.2011.04037.x , https://doi.org/10.1111/j.1365-2125.2011.04037.x.","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/ror.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reporting Odds Ratio — ror","text":"","code":"pvutils::ror(a = 5,              b = 10,              c = 20,              d = 10000) #> # A tibble: 1 × 3 #>   ror2.5   ror ror97.5 #>    <dbl> <dbl>   <dbl> #> 1   78.4   250    797.  # Note that a, b, c and d can be vectors (of equal length, no recycling) pvutils::ror(a = c(5, 10),              b = c(10, 20),              c = c(15, 30),              d = c(10000, 10000)) #> # A tibble: 2 × 3 #>   ror2.5   ror ror97.5 #>    <dbl> <dbl>   <dbl> #> 1  102.   333.   1092. #> 2   72.0  167.    386."},{"path":"https://oskargauffin.github.io/pvutils/reference/write_to_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Write to excel — write_to_excel","title":"Write to excel — write_to_excel","text":"Writes output disproportionality analysis excel file","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/write_to_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write to excel — write_to_excel","text":"","code":"write_to_excel(df, write_path = NULL)"},{"path":"https://oskargauffin.github.io/pvutils/reference/write_to_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write to excel — write_to_excel","text":"df data frame export. See `?da` details. write_path string giving file path","code":""},{"path":"https://oskargauffin.github.io/pvutils/reference/write_to_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write to excel — write_to_excel","text":"Nothing.","code":""}]
